apiVersion: v1
kind: Template
labels:
  template: amq-broker-71-custom
  xpaas: 1.4.12
message: A new messaging service has been created in your project. It will handle the protocol(s) "${AMQ_PROTOCOL}". The username/password for accessing the service is ${AMQ_USER}/${AMQ_PASSWORD}.
metadata:
  annotations:
    description: Application template for JBoss AMQ brokers. These can be deployed as standalone or in a mesh. This template doesn't feature SSL support.
    iconClass: icon-amq
    openshift.io/display-name: JBoss AMQ Broker 7.1 Custom Config (Ephemeral, no SSL)
    openshift.io/provider-display-name: Red Hat, Inc.
    tags: messaging,amq,jboss
    version: 1.4.12
  name: amq-broker-71-custom
objects:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's console Jolokia port.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-jolokia
  spec:
    ports:
    - port: 8161
      targetPort: 8161
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's AMQP port.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-amqp
  spec:
    ports:
    - port: 5672
      targetPort: 5672
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's MQTT port.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-mqtt
  spec:
    ports:
    - port: 1883
      targetPort: 1883
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's STOMP port.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-stomp
  spec:
    ports:
    - port: 61613
      targetPort: 61613
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's OpenWire port.
      service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-amq-amqp",
        "kind": "Service"},{"name": "${APPLICATION_NAME}-amq-mqtt", "kind": "Service"},{"name":
        "${APPLICATION_NAME}-amq-stomp", "kind": "Service"}]'
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-tcp
  spec:
    ports:
    - port: 61616
      targetPort: 61616
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq
  spec:
    replicas: 1
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
    strategy:
      rollingParams:
        maxSurge: 0
      type: Rolling
    template:
      metadata:
        labels:
          application: ${APPLICATION_NAME}
          deploymentConfig: ${APPLICATION_NAME}-amq
        name: ${APPLICATION_NAME}-amq
      spec:
        containers:
        - env:
          - name: AMQ_USER
            value: ${AMQ_USER}
          - name: AMQ_PASSWORD
            value: ${AMQ_PASSWORD}
          - name: AMQ_ROLE
            value: ${AMQ_ROLE}
          - name: AMQ_NAME
            value: ${AMQ_NAME}
          - name: AMQ_TRANSPORTS
            value: ${AMQ_PROTOCOL}
          - name: AMQ_QUEUES
            value: ${AMQ_QUEUES}
          - name: AMQ_ADDRESSES
            value: ${AMQ_ADDRESSES}
          - name: AMQ_GLOBAL_MAX_SIZE
            value: ${AMQ_GLOBAL_MAX_SIZE}
          - name: BROKER_XML
            value: ${BROKER_XML}
          - name: LOGGING_PROPERTIES
            value: ${LOGGING_PROPERTIES}
          image: amq-broker-71-openshift
          imagePullPolicy: Always
          readinessProbe:
            exec:
              command:
              - "/bin/bash"
              - "-c"
              - "/opt/amq/bin/readinessProbe.sh"       
          name: ${APPLICATION_NAME}-amq
          ports:
          - containerPort: 8161
            name: console-jolokia
            protocol: TCP
          - containerPort: 5672
            name: amqp
            protocol: TCP
          - containerPort: 1883
            name: mqtt
            protocol: TCP
          - containerPort: 61613
            name: stomp
            protocol: TCP
          - containerPort: 61616
            name: artemis
            protocol: TCP
        terminationGracePeriodSeconds: 60
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}-amq
        from:
          kind: ImageStreamTag
          name: amq-broker-71-openshift:1.0
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: console
  spec:
    to:
      kind: Service
      name: ${APPLICATION_NAME}-amq-jolokia
parameters:
- description: The name for the application.
  displayName: Application Name
  name: APPLICATION_NAME
  required: true
  value: broker
- description: 'Protocols to configure, separated by commas. Allowed values are: `openwire`, `amqp`, `stomp`, `mqtt` and `hornetq`.'
  displayName: AMQ Protocols
  name: AMQ_PROTOCOL
  value: openwire,amqp,stomp,mqtt,hornetq
- description: Queue names, separated by commas. These queues will be automatically created when the broker starts. If left empty, queues will be still created dynamically.
  displayName: Queues
  name: AMQ_QUEUES
- description: Address names, separated by commas. These addresses will be automatically created when the broker starts. If left empty, addresses will be still created dynamically.
  displayName: Addresses
  name: AMQ_ADDRESSES
- description: User name for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.
  displayName: AMQ Username
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: AMQ_USER
- description: Password for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.
  displayName: AMQ Password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: AMQ_PASSWORD
- description: User role for standard broker user.
  displayName: AMQ Role
  name: AMQ_ROLE
  value: admin
- description: The name of the broker
  displayName: AMQ Name
  name: AMQ_NAME
  value: broker
- description: "Maximum amount of memory which message data may consume (Default: Undefined, half of the system's memory)."
  displayName: AMQ Global Max Size
  name: AMQ_GLOBAL_MAX_SIZE
  value: 100 gb
- description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
  displayName: ImageStream Namespace
  name: IMAGE_STREAM_NAMESPACE
  required: true
  value: openshift
- description: The broker.xml configuration file.
  displayName: broker.xml
  name: BROKER_XML
  value: |-
    <!-- Remove this tag to enable custom configuration --> 
    <?xml version='1.0'?>
    <!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
    -->

    <configuration xmlns="urn:activemq"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="urn:activemq /schema/artemis-configuration.xsd">

       <core xmlns="urn:activemq:core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="urn:activemq:core ">

          <name>${AMQ_NAME}</name>

          <persistence-enabled>true</persistence-enabled>

          <!-- this could be ASYNCIO, MAPPED, NIO
               ASYNCIO: Linux Libaio
               MAPPED: mmap files
               NIO: Plain Java Files
           -->
          <journal-type>NIO</journal-type>

          <paging-directory>./data/paging</paging-directory>

          <bindings-directory>./data/bindings</bindings-directory>

          <journal-directory>./data/journal</journal-directory>

          <large-messages-directory>./data/large-messages</large-messages-directory>

          <journal-datasync>true</journal-datasync>

          <journal-min-files>2</journal-min-files>

          <journal-pool-files>10</journal-pool-files>

          <journal-file-size>10M</journal-file-size>
          
          <!--
           This value was determined through a calculation.
           Your system could perform 0.26 writes per millisecond
           on the current journal configuration.
           That translates as a sync write every 3800000 nanoseconds.

           Note: If you specify 0 the system will perform writes directly to the disk.
                 We recommend this to be 0 if you are using journalType=MAPPED and ournal-datasync=false.
          -->
          <journal-buffer-timeout>3800000</journal-buffer-timeout>


          <!--
            When using ASYNCIO, this will determine the writing queue depth for libaio.
           -->
          <journal-max-io>1</journal-max-io>
          <!--
            You can verify the network health of a particular NIC by specifying the <network-check-NIC> element.
             <network-check-NIC>theNicName</network-check-NIC>
            -->

          <!--
            Use this to use an HTTP server to validate the network
             <network-check-URL-list>http://www.apache.org</network-check-URL-list> -->

          <!-- <network-check-period>10000</network-check-period> -->
          <!-- <network-check-timeout>1000</network-check-timeout> -->

          <!-- this is a comma separated list, no spaces, just DNS or IPs
               it should accept IPV6

               Warning: Make sure you understand your network topology as this is meant to validate if your network is valid.
                        Using IPs that could eventually disappear or be partially visible may defeat the purpose.
                        You can use a list of multiple IPs, and if any successful ping will make the server OK to continue running -->
          <!-- <network-check-list>10.0.0.1</network-check-list> -->

          <!-- use this to customize the ping used for ipv4 addresses -->
          <!-- <network-check-ping-command>ping -c 1 -t %d %s</network-check-ping-command> -->

          <!-- use this to customize the ping used for ipv6 addresses -->
          <!-- <network-check-ping6-command>ping6 -c 1 %2$s</network-check-ping6-command> -->




          <!-- how often we are looking for how many bytes are being used on the disk in ms -->
          <disk-scan-period>5000</disk-scan-period>

          <!-- once the disk hits this limit the system will block, or close the connection in certain protocols
               that won't support flow control. -->
          <max-disk-usage>90</max-disk-usage>

          <!-- should the broker detect dead locks and other issues -->
          <critical-analyzer>true</critical-analyzer>

          <critical-analyzer-timeout>120000</critical-analyzer-timeout>

          <critical-analyzer-check-period>60000</critical-analyzer-check-period>

          <critical-analyzer-policy>HALT</critical-analyzer-policy>

          <!-- the system will enter into page mode once you hit this limit.
               This is an estimate in bytes of how much the messages are using in memory

                The system will use half of the available memory (-Xmx) by default for the global-max-size.
                You may specify a different value here if you need to customize it to your needs.

                <global-max-size>${AMQ_STORAGE_USAGE_LIMIT}</global-max-size>

          -->

          <acceptors>

             <!-- useEpoll means: it will use Netty epoll if you are on a system (Linux) that supports it -->
             <!-- amqpCredits: The number of credits sent to AMQP producers -->
             <!-- amqpLowCredits: The server will send the # credits specified at amqpCredits at this low mark -->

             <!-- Acceptor for every supported protocol -->
             <acceptor name="artemis">tcp://${BROKER_IP}:61616?tcpSendBufferSize=1048576;tcpReceiveBufferSize=1048576;protocols=CORE,AMQP,STOMP,HORNETQ,MQTT,OPENWIRE;useEpoll=true;amqpCredits=1000;amqpLowCredits=300</acceptor>

             <!-- AMQP Acceptor.  Listens on default AMQP port for AMQP traffic.-->
             <acceptor name="amqp">tcp://${BROKER_IP}:5672?tcpSendBufferSize=1048576;tcpReceiveBufferSize=1048576;protocols=AMQP;useEpoll=true;amqpCredits=1000;amqpMinCredits=300</acceptor>

             <!-- STOMP Acceptor. -->
             <acceptor name="stomp">tcp://${BROKER_IP}:61613?tcpSendBufferSize=1048576;tcpReceiveBufferSize=1048576;protocols=STOMP;useEpoll=true</acceptor>

             <!-- HornetQ Compatibility Acceptor.  Enables HornetQ Core and STOMP for legacy HornetQ clients. -->
             <acceptor name="hornetq">tcp://${BROKER_IP}:5445?protocols=HORNETQ,STOMP;useEpoll=true</acceptor>

             <!-- MQTT Acceptor -->
             <acceptor name="mqtt">tcp://${BROKER_IP}:1883?tcpSendBufferSize=1048576;tcpReceiveBufferSize=1048576;protocols=MQTT;useEpoll=true</acceptor>

          </acceptors>


          <security-settings>
             <security-setting match="#">
                <permission type="createNonDurableQueue" roles="${AMQ_ROLE}"/>
                <permission type="deleteNonDurableQueue" roles="${AMQ_ROLE}"/>
                <permission type="createDurableQueue" roles="${AMQ_ROLE}"/>
                <permission type="deleteDurableQueue" roles="${AMQ_ROLE}"/>
                <permission type="createAddress" roles="${AMQ_ROLE}"/>
                <permission type="deleteAddress" roles="${AMQ_ROLE}"/>
                <permission type="consume" roles="${AMQ_ROLE}"/>
                <permission type="browse" roles="${AMQ_ROLE}"/>
                <permission type="send" roles="${AMQ_ROLE}"/>
                <!-- we need this otherwise ./artemis data imp wouldn't work -->
                <permission type="manage" roles="${AMQ_ROLE}"/>
             </security-setting>
          </security-settings>

          <address-settings>
             <!-- if you define auto-create on certain queues, management has to be auto-create -->
             <address-setting match="activemq.management#">
                <dead-letter-address>DLQ</dead-letter-address>
                <expiry-address>ExpiryQueue</expiry-address>
                <redelivery-delay>0</redelivery-delay>
                <!-- with -1 only the global-max-size is in use for limiting -->
                <max-size-bytes>-1</max-size-bytes>
                <message-counter-history-day-limit>10</message-counter-history-day-limit>
                <address-full-policy>PAGE</address-full-policy>
                <auto-create-queues>true</auto-create-queues>
                <auto-create-addresses>true</auto-create-addresses>
                <auto-create-jms-queues>true</auto-create-jms-queues>
                <auto-create-jms-topics>true</auto-create-jms-topics>
             </address-setting>
             <!--default for catch all-->
             <address-setting match="#">
                <dead-letter-address>DLQ</dead-letter-address>
                <expiry-address>ExpiryQueue</expiry-address>
                <redelivery-delay>0</redelivery-delay>
                <!-- with -1 only the global-max-size is in use for limiting -->
                <max-size-bytes>-1</max-size-bytes>
                <message-counter-history-day-limit>10</message-counter-history-day-limit>
                <address-full-policy>PAGE</address-full-policy>
                <auto-create-queues>true</auto-create-queues>
                <auto-create-addresses>true</auto-create-addresses>
                <auto-create-jms-queues>true</auto-create-jms-queues>
                <auto-create-jms-topics>true</auto-create-jms-topics>
             </address-setting>
          </address-settings>

          <addresses>
             <address name="DLQ">
                <anycast>
                   <queue name="DLQ" />
                </anycast>
             </address>
             <address name="ExpiryQueue">
                <anycast>
                   <queue name="ExpiryQueue" />
                </anycast>
             </address>

          </addresses>

       </core>
    </configuration>
- description: The logging.properties configuration file.
  displayName: logging.properties
  name: LOGGING_PROPERTIES
  value: |-
    <!-- Remove this tag to enable custom configuration --> 
    #
    # Licensed to the Apache Software Foundation (ASF) under one or more
    # contributor license agreements. See the NOTICE file distributed with
    # this work for additional information regarding copyright ownership.
    # The ASF licenses this file to You under the Apache License, Version 2.0
    # (the "License"); you may not use this file except in compliance with
    # the License. You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    #

    # Additional logger names to configure (root logger is always configured)
    # Root logger option
    loggers=org.eclipse.jetty,org.jboss.logging,org.apache.activemq.artemis.core.server,org.apache.activemq.artemis.utils,org.apache.activemq.artemis.journal,org.apache.activemq.artemis.jms.server,org.apache.activemq.artemis.integration.bootstrap

    # Root logger level
    logger.level=INFO
    # ActiveMQ Artemis logger levels
    logger.org.apache.activemq.artemis.core.server.level=INFO
    logger.org.apache.activemq.artemis.journal.level=INFO
    logger.org.apache.activemq.artemis.utils.level=INFO
    logger.org.apache.activemq.artemis.jms.level=INFO
    logger.org.apache.activemq.artemis.integration.bootstrap.level=INFO
    logger.org.eclipse.jetty.level=WARN
    # Root logger handlers
    logger.handlers=CONSOLE

    # Console handler configuration
    handler.CONSOLE=org.jboss.logmanager.handlers.ConsoleHandler
    handler.CONSOLE.properties=autoFlush
    handler.CONSOLE.level=DEBUG
    handler.CONSOLE.autoFlush=true
    handler.CONSOLE.formatter=PATTERN

    # File handler configuration
    handler.FILE=org.jboss.logmanager.handlers.PeriodicRotatingFileHandler
    handler.FILE.level=DEBUG
    handler.FILE.properties=suffix,append,autoFlush,fileName
    handler.FILE.suffix=.yyyy-MM-dd
    handler.FILE.append=true
    handler.FILE.autoFlush=true
    handler.FILE.fileName=${artemis.instance}/log/artemis.log
    handler.FILE.formatter=PATTERN

    # Formatter pattern configuration
    formatter.PATTERN=org.jboss.logmanager.formatters.PatternFormatter
    formatter.PATTERN.properties=pattern
    formatter.PATTERN.pattern=%d %-5p [%c] %s%E%n

